generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  phone        String        @unique
  transactions Transaction[]
  customerPhoto String 
  coupons      CustomerCoupon[]
  otp          String?
  otpExpires   DateTime?
  isVerified   Boolean       @default(false)
  password     String
}

model Store {
  id             Int           @id @default(autoincrement())
  name           String
  address        String
  logo           String
  ownerName      String
  ownerDob       DateTime
  ownerGender    String
  ownerPhone     String        @unique
  ownerAadhaar   String        @unique
  email          String        @unique
  ownerPhoto     String
  cover          String
  ownerUpi       String
  otp            String?
  otpExpires     DateTime?
  reviews        Json[]
  avgRating      Float         @default(0)
  staff          Staff[]       @relation("StoreToStaff") // Relation name is provided here
  transactions   Transaction[]
  coupons        Coupon[]
  isVerified     Boolean       @default(false)
  storeId        String        @unique
  password       String
  googleReviewUrl String?
}

model Staff {
  id           Int           @id @default(autoincrement())
  storeId      String
  store        Store         @relation("StoreToStaff", fields: [storeId], references: [storeId], onDelete: Cascade) // Bidirectional relation
  name         String
  email        String        @unique
  aadhaar      String        @unique
  upi          String
  dob          DateTime                                                 
  photo        String?
  gender       String
  password     String
  number       String        @unique
  reviews      Json[]
  avgRating    Float         @default(0)
  transactions Transaction[]
  isVerified   Boolean       @default(false)
  otp          String?
  otpExpires   DateTime?
}


model PlatformReview {
  id      Int    @id @default(autoincrement())
  name    String
  title   String
  text    String
  rating  Int
}

model Transaction {
  id        Int      @id @default(autoincrement())
  time      DateTime @default(now())
  customerId Int
  storeId   Int
  staffId   Int
  bill      Float
  tip       Float
  total     Float
  customer  Customer @relation(fields: [customerId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])
  staff     Staff    @relation(fields: [staffId], references: [id])
  upiTransactionId String?
}

model CustomerCoupon {
  id              Int      @id @default(autoincrement())
  customer        Customer @relation(fields: [customerId], references: [id])
  customerId      Int
  coupon          Coupon   @relation(fields: [couponId], references: [id])
  couponId        Int
  timesCouponUsed Int      @default(0)

  @@unique([customerId, couponId])
}

model Coupon {
  id                 Int      @id @default(autoincrement())
  title              String
  description        String
  discountType       String
  discountValue      Float
  minimumPurchase    Float?
  couponCode         String   @unique
  expirationDate     DateTime
  totalUses          Int
  usesPerCustomer    Int
  applicableItems    String
  specificItems      String?
  customerRestriction String
  termsConditions    String?
  visibility         Json
  contactInfo        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  store              Store    @relation(fields: [storeId], references: [id])
  storeId            Int
  customers          CustomerCoupon[]
  customerId         Int?
}